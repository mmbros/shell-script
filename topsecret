#!/usr/bin/env bash
#
# utility to create/extract a gpg crypted gzipped tar archive.


#
# Bash settings
# 
set -o errexit   # abort on nonzero exitstatus
set -o nounset   # abort on unbound variable
set -o pipefail  # don't hide errors within pipes

# outputs each line of script as it executes it
if [[ "${TRACE-0}" == "1" ]]; then set -o xtrace; fi

#
# Constants
#
readonly CMDNAME="${0##*/}" 

TAR_COMPRESSION="--gzip"

TAR_CREATE_OPT=("${TAR_COMPRESSION}")
TAR_EXTRACT_OPT=("${TAR_COMPRESSION}" --preserve-permissions --keep-old-files)

# GPG_OPT=(--batch --passphrase "PASSPHRASE") # dev mode
GPG_OPT=()

DEFAULT_EXT=".tar.gz.gpg"

#
# Functions
#


# Print usage informations
usage() {
	cat << EOF
${CMDNAME}: utility to create/extract a gpg crypted gzipped tar archive.

Usage: 
  ${CMDNAME} crypt   file item [item...]
  ${CMDNAME} decrypt file [folder]

Aliases:
  c, -c, --crypt for crypt 
  d, -d, --decrypt for decrypt 

Exit with error in case destination file or folder already exists.
EOF
}


# Print message to stdout
#
# Usage:
#    log STRING [STRING...]
# Arguments:
#    STRING : message to print
#
log() {
	printf '%s\n' "$@"
}


# Print message to stderr and exit 1
#
# Usage:
#    die STRING [STRING...]
# Arguments:
#    STRING : message to print
#
die() {
	printf '%s: %s\n' "${CMDNAME}" "$@" >&2
	exit 1
}


# Tar the items and crypt the tar file
#
# Usage:
#    create_crypted_tar FILE ITEM [ITEM...]
# Arguments:
#    FILE : destination gpg crypted gzipped tar file
#    ITEM : one or more source file/dir to archive
#
create_crypted_tar() {
    [[ $# -eq 0 ]] && die "destination file must be specified"
	local file="${1}"
	if [[ "${file##*/}" != *"."* ]]; then
		file="${file}${DEFAULT_EXT}"
	fi

	[[ -e "${file}" ]] && die "destination file already exists: \"${file}\""

    shift

    [[ $# -eq 0 ]] && die "at least one item to archive must be specified"
	local items=("$@")

    tar cf - "${TAR_CREATE_OPT[@]}" "${items[@]}" | gpg "${GPG_OPT[@]}" --symmetric -o "${file}"

	log "created gpg crypted gzipped tar file: \"${file}\""
}


# Decrypt the archive and untar it
#
# Usage:
#    extract_crypted_tar FILE [ FOLDER ]
# Arguments:
#    FILE   : source gpg crypted gzipped tar file
#    FOLDER : destination folder. If missing, use the name of the file (without extension)
#
extract_crypted_tar() {
    [[ $# -eq 0 ]] && die "source file must be specified"
	local file="${1}"
	local folder="${2:-}"

    if [[ -z "${folder}" ]]; then
        # get folder name from file
	    folder="${file##*/}"  # trim path
	    folder="${file%%.*}"  # trim extension
    fi

	[[ -e "${folder}" ]] && die "destination folder already exists: \"${folder}\""

	gpg "${GPG_OPT[@]}" --decrypt "${file}" | tar xf - "${TAR_EXTRACT_OPT[@]}" --one-top-level="${folder}"

	log "gpg crypted gzipped tar file \"${file}\" extracted to folder \"${folder}\""
}




main() {
	case ${1:-} in
		h|help|-h|--help)
			usage
			;;
		c|crypt|-c|--crypt)
			shift
			create_crypted_tar "$@"
			;;
		d|decrypt|-d|--decrypt)
			shift
			extract_crypted_tar "$@"
			;;
		*)
			if (($# == 0)) ; then
				usage
			else
				die "unknown command \"$1\"."
			fi
			;;
	esac

}

main "$@" 
